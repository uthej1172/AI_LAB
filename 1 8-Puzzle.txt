from heapq import heappush, heappop

def solve(s, g='123456780'):
    H = lambda x: sum(a != b and a != '0' for a, b in zip(x, g))
    M = {i:[j for j in(i-3,i+3,i-1,i+1)if 0<=j<9 and(abs(i-j)==3 or i//3==j//3)] for i in range(9)}
    V,Q=set(),[(H(s),0,s,[])]
    while Q:
        _,d,u,p=heappop(Q)
        if u==g:return p+[u]
        if u in V:continue
        V.add(u)
        z=u.index('0')
        for m in M[z]:
            t=list(u);t[z],t[m]=t[m],t[z]
            n=''.join(t)
            if n not in V:heappush(Q,(d+1+H(n),d+1,n,p+[u]))
    return []

def show(state):
    for i in range(0,9,3): print(' '.join(state[i:i+3]).replace('0','_')); print()

inp = input("Enter 8-puzzle as 9 digits (use 0 as blank): ")
path = solve(inp)
print("\nSteps to solve:\n")
for i, s in enumerate(path): print(f"Step {i}:"); show(s)
