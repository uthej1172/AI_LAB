import heapq

def a_star(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    def h(p): return abs(p[0]-goal[0]) + abs(p[1]-goal[1])  # Manhattan distance
    open_list = [(h(start), 0, start, [start])]
    visited = set()

    while open_list:
        _, cost, current, path = heapq.heappop(open_list)
        if current == goal:
            return path
        if current in visited:
            continue
        visited.add(current)
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = current[0]+dx, current[1]+dy
            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0:
                next_node = (nx, ny)
                if next_node not in visited:
                    heapq.heappush(open_list, (cost+1+h(next_node), cost+1, next_node, path + [next_node]))
    return None

# 0 = free, 1 = wall
grid = [
    [0, 0, 0, 0],
    [1, 1, 0, 1],
    [0, 0, 0, 0],
    [0, 1, 1, 0]
]

start = (0, 0)
goal = (3, 3)
path = a_star(grid, start, goal)
print("Path:", path)
