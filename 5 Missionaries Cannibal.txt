from collections import deque

def is_valid(m_left, c_left, m_right, c_right):
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if (m_left and m_left < c_left) or (m_right and m_right < c_right):
        return False
    return True

def missionaries_cannibals():
    start = (3, 3, 0, 0, 0)
    goal = (0, 0, 1, 3, 3)
    queue = deque()
    visited = set()
    queue.append((start, []))
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]

    while queue:
        current, path = queue.popleft()
        m_left, c_left, boat, m_right, c_right = current

        if current in visited:
            continue
        visited.add(current)

        if current == goal:
            print("Solution found!")
            for step in path + [current]:
                print(step)
            return

        for m, c in moves:
            if boat == 0:
                new_state = (m_left - m, c_left - c, 1, m_right + m, c_right + c)
            else:
                new_state = (m_left + m, c_left + c, 0, m_right - m, c_right - c)

            if is_valid(*new_state[:2], *new_state[3:]):
                queue.append((new_state, path + [current]))

    print("No solution found.")

missionaries_cannibals()
